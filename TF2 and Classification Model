{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "satisfied-aluminum",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "chinese-matthew",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "distinct-swing",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2.3.0'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.__version__\n",
    "#tf.keras.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "patent-harmony",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From <ipython-input-14-4851f49a7921>:2: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use `tf.config.list_physical_devices('GPU')` instead.\n",
      "CPU\n"
     ]
    }
   ],
   "source": [
    "variable = tf.Variable([3,3])\n",
    "if tf.test.is_gpu_available():\n",
    "    print('GPU')\n",
    "    print('GPU#0?')\n",
    "    print(var.device.endswith('GPU:0'))\n",
    "else:\n",
    "    print(\"CPU\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "mediterranean-frontier",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Variable 'Variable:0' shape=(2, 2) dtype=float32, numpy=\n",
       "array([[-1.4391574 , -0.53739125],\n",
       "       [ 0.34267804, -1.4365636 ]], dtype=float32)>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "initial = tf.random.normal(shape=(2,2))\n",
    "a = tf.Variable(initial)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ancient-detail",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Variable 'UnreadVariable' shape=(2, 2) dtype=float32, numpy=\n",
       "array([[-2.2676117, -0.7068052],\n",
       "       [ 0.4954586,  1.1365764]], dtype=float32)>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_val = tf.random.normal(shape=(2,2))\n",
    "a.assign(new_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "unique-semiconductor",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Variable 'Variable:0' shape=(2, 2) dtype=float32, numpy=\n",
       "array([[-2.481707  , -0.40771738],\n",
       "       [ 1.0954083 ,  1.293826  ]], dtype=float32)>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "geographic-falls",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Variable 'UnreadVariable' shape=(2, 2) dtype=float32, numpy=\n",
       "array([[-2.481707  , -0.40771738],\n",
       "       [ 1.0954083 ,  1.293826  ]], dtype=float32)>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new = tf.random.normal(shape=(2,2))\n",
    "a.assign_add(new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "ecological-burning",
   "metadata": {},
   "outputs": [],
   "source": [
    "b = tf.Variable(24)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "considered-marina",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Variable 'Variable:0' shape=() dtype=int32, numpy=24>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "specialized-representative",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = tf.Variable(26)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "controlled-index",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Variable 'UnreadVariable' shape=() dtype=int32, numpy=50>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.assign_add(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "polish-contrary",
   "metadata": {},
   "source": [
    "### KERAS "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "proper-input",
   "metadata": {},
   "outputs": [],
   "source": [
    "mnist_data = tf.keras.datasets.mnist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "complicated-agenda",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<module 'tensorflow.keras.datasets.mnist' from 'c:\\\\users\\\\jalebi2\\\\anaconda3\\\\envs\\\\tf2\\\\lib\\\\site-packages\\\\tensorflow\\\\keras\\\\datasets\\\\mnist\\\\__init__.py'>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mnist_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "theoretical-graphics",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((array([[[0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          ...,\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0]],\n",
       "  \n",
       "         [[0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          ...,\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0]],\n",
       "  \n",
       "         [[0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          ...,\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0]],\n",
       "  \n",
       "         ...,\n",
       "  \n",
       "         [[0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          ...,\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0]],\n",
       "  \n",
       "         [[0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          ...,\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0]],\n",
       "  \n",
       "         [[0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          ...,\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0]]], dtype=uint8),\n",
       "  array([5, 0, 4, ..., 5, 6, 8], dtype=uint8)),\n",
       " (array([[[0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          ...,\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0]],\n",
       "  \n",
       "         [[0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          ...,\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0]],\n",
       "  \n",
       "         [[0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          ...,\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0]],\n",
       "  \n",
       "         ...,\n",
       "  \n",
       "         [[0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          ...,\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0]],\n",
       "  \n",
       "         [[0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          ...,\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0]],\n",
       "  \n",
       "         [[0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          ...,\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0],\n",
       "          [0, 0, 0, ..., 0, 0, 0]]], dtype=uint8),\n",
       "  array([7, 2, 1, ..., 4, 5, 6], dtype=uint8)))"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mnist_data.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "superior-alarm",
   "metadata": {},
   "outputs": [],
   "source": [
    "(train_x,train_y),(test_x,test_y) = mnist_data.load_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "alpine-award",
   "metadata": {},
   "source": [
    "### Declaring Variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "personalized-gospel",
   "metadata": {},
   "outputs": [],
   "source": [
    "epocs = 10\n",
    "batch = 30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "million-return",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_x,test_x= tf.cast(train_x/255.0,tf.float32),tf.cast(test_x/255.0,tf.float32)\n",
    "train_y,test_y = tf.cast(train_y,tf.int64),tf.cast(test_y,tf.int64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "integral-twelve",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "floppy-wilderness",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(3,), dtype=int32, numpy=array([60000,    28,    28])>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.shape(train_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "authorized-complexity",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Lets view the first datapoint of train data\n",
    "plt.imshow(train_x[20], cmap = \"binary\")\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "blank-coverage",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (15,15))\n",
    "sns.heatmap(train_x[20], annot = True, cmap = \"binary\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "subtle-speaker",
   "metadata": {},
   "source": [
    "### Building the architecture"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "established-encounter",
   "metadata": {},
   "outputs": [],
   "source": [
    "layer = [(tf.keras.layers.Flatten(input_shape=[28,28],name = \"input_layer\")),\n",
    "        (tf.keras.layers.Dense(512,activation = \"relu\",name = \"Hidden_Layer1\")),\n",
    "         (tf.keras.layers.Dense(365,activation = \"relu\",name = \"Hidden_layer2\")),\n",
    "         (tf.keras.layers.Dropout(0.2,name = \"Dropout\")),\n",
    "         (tf.keras.layers.Dense(512,activation = \"softmax\",name = \"output_layer\"))\n",
    "         ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "frozen-marsh",
   "metadata": {},
   "outputs": [],
   "source": [
    "mistmodel = tf.keras.models.Sequential(layer)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acute-kennedy",
   "metadata": {},
   "source": [
    "#### Alternative1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "major-elevation",
   "metadata": {},
   "outputs": [],
   "source": [
    "mistmodel = tf.keras.models.Sequential([\n",
    "    #flatening the N dimension array in M*1 matrix that will be input in batch size of 32\n",
    "    tf.keras.layers.Flatten(),\n",
    "    #intialising hidden layer with 512 neurons and taking relu as activation function\n",
    "    tf.keras.layers.Dense(512,activation=tf.nn.relu),\n",
    "    tf.keras.layers.Dense(365,activation=tf.nn.leaky_relu),\n",
    "    #selecting 80% of neurons in each epocs\n",
    "    tf.keras.layers.Dropout(0.2),\n",
    "    #intializing output layer that have 10 labels as o/p so 10 neurons will be there\n",
    "    tf.keras.layers.Dense(10,activation=tf.nn.softmax)\n",
    "])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "understood-newfoundland",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<tensorflow.python.keras.layers.core.Flatten at 0x18551c26b38>,\n",
       " <tensorflow.python.keras.layers.core.Dense at 0x18551c266a0>,\n",
       " <tensorflow.python.keras.layers.core.Dense at 0x18551c26898>,\n",
       " <tensorflow.python.keras.layers.core.Dropout at 0x185520e5470>,\n",
       " <tensorflow.python.keras.layers.core.Dense at 0x185520e5518>]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mistmodel.layers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "russian-warner",
   "metadata": {},
   "source": [
    "### Compiling the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "prescription-scene",
   "metadata": {},
   "outputs": [],
   "source": [
    "optimiser = tf.keras.optimizers.Adam()\n",
    "mistmodel.compile(optimizer = optimiser,loss = \"sparse_categorical_crossentropy\",metrics = [\"accuracy\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cultural-witch",
   "metadata": {},
   "source": [
    "### Fitting the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "lyric-marsh",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "1875/1875 [==============================] - 8s 4ms/step - loss: 0.0124 - accuracy: 0.9967\n",
      "Epoch 2/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0124 - accuracy: 0.9968\n",
      "Epoch 3/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0151 - accuracy: 0.9962\n",
      "Epoch 4/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0116 - accuracy: 0.9969\n",
      "Epoch 5/50\n",
      "1875/1875 [==============================] - 10s 5ms/step - loss: 0.0121 - accuracy: 0.9974\n",
      "Epoch 6/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0118 - accuracy: 0.9972\n",
      "Epoch 7/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0142 - accuracy: 0.9968\n",
      "Epoch 8/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0119 - accuracy: 0.9971\n",
      "Epoch 9/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0109 - accuracy: 0.9973\n",
      "Epoch 10/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0142 - accuracy: 0.9972\n",
      "Epoch 11/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0127 - accuracy: 0.9970\n",
      "Epoch 12/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0103 - accuracy: 0.9974\n",
      "Epoch 13/50\n",
      "1875/1875 [==============================] - 10s 5ms/step - loss: 0.0111 - accuracy: 0.9974\n",
      "Epoch 14/50\n",
      "1875/1875 [==============================] - 10s 5ms/step - loss: 0.0112 - accuracy: 0.9977\n",
      "Epoch 15/50\n",
      "1875/1875 [==============================] - 10s 5ms/step - loss: 0.0116 - accuracy: 0.9975\n",
      "Epoch 16/50\n",
      "1875/1875 [==============================] - 10s 5ms/step - loss: 0.0155 - accuracy: 0.9971\n",
      "Epoch 17/50\n",
      "1875/1875 [==============================] - 10s 5ms/step - loss: 0.0095 - accuracy: 0.9980\n",
      "Epoch 18/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0115 - accuracy: 0.9976\n",
      "Epoch 19/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0113 - accuracy: 0.9975\n",
      "Epoch 20/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0124 - accuracy: 0.9977\n",
      "Epoch 21/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0115 - accuracy: 0.9977\n",
      "Epoch 22/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0103 - accuracy: 0.9981\n",
      "Epoch 23/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0086 - accuracy: 0.9983\n",
      "Epoch 24/50\n",
      "1875/1875 [==============================] - 10s 5ms/step - loss: 0.0120 - accuracy: 0.9979\n",
      "Epoch 25/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0102 - accuracy: 0.9980\n",
      "Epoch 26/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0109 - accuracy: 0.9981\n",
      "Epoch 27/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0122 - accuracy: 0.9979\n",
      "Epoch 28/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0111 - accuracy: 0.9979\n",
      "Epoch 29/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0111 - accuracy: 0.9978\n",
      "Epoch 30/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0093 - accuracy: 0.9984\n",
      "Epoch 31/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0122 - accuracy: 0.9978\n",
      "Epoch 32/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0074 - accuracy: 0.9985\n",
      "Epoch 33/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0113 - accuracy: 0.9982\n",
      "Epoch 34/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0101 - accuracy: 0.9985\n",
      "Epoch 35/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0103 - accuracy: 0.9980\n",
      "Epoch 36/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0110 - accuracy: 0.9982\n",
      "Epoch 37/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0113 - accuracy: 0.9982\n",
      "Epoch 38/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0097 - accuracy: 0.9984\n",
      "Epoch 39/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0111 - accuracy: 0.9981\n",
      "Epoch 40/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0114 - accuracy: 0.9984\n",
      "Epoch 41/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0115 - accuracy: 0.9983\n",
      "Epoch 42/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0112 - accuracy: 0.9983\n",
      "Epoch 43/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0087 - accuracy: 0.9985\n",
      "Epoch 44/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0131 - accuracy: 0.9980\n",
      "Epoch 45/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0104 - accuracy: 0.9984\n",
      "Epoch 46/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0079 - accuracy: 0.9987\n",
      "Epoch 47/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0090 - accuracy: 0.9986\n",
      "Epoch 48/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0118 - accuracy: 0.9982\n",
      "Epoch 49/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0129 - accuracy: 0.9981\n",
      "Epoch 50/50\n",
      "1875/1875 [==============================] - 9s 5ms/step - loss: 0.0111 - accuracy: 0.9984\n"
     ]
    }
   ],
   "source": [
    "t1 = mistmodel.fit(train_x,train_y,epochs = 10,batch_size = 32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "incorporate-pregnancy",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_4\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input_layer (Flatten)        (None, 784)               0         \n",
      "_________________________________________________________________\n",
      "Hidden_Layer1 (Dense)        (None, 512)               401920    \n",
      "_________________________________________________________________\n",
      "Hidden_layer2 (Dense)        (None, 365)               187245    \n",
      "_________________________________________________________________\n",
      "Dropout (Dropout)            (None, 365)               0         \n",
      "_________________________________________________________________\n",
      "output_layer (Dense)         (None, 512)               187392    \n",
      "=================================================================\n",
      "Total params: 776,557\n",
      "Trainable params: 776,557\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "mistmodel.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acoustic-flood",
   "metadata": {},
   "source": [
    "### Evaluate the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "sapphire-institution",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "313/313 [==============================] - 1s 2ms/step - loss: 0.1045 - accuracy: 0.9795\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.10451905429363251, 0.9794999957084656]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mistmodel.evaluate(test_x,test_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "intimate-donna",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'verbose': 1, 'epochs': 10, 'steps': 1875}"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t1.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "saving-spiritual",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loss</th>\n",
       "      <th>accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.019405</td>\n",
       "      <td>0.994150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.018580</td>\n",
       "      <td>0.994883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.017222</td>\n",
       "      <td>0.994800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.017676</td>\n",
       "      <td>0.994617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.016781</td>\n",
       "      <td>0.995117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.013922</td>\n",
       "      <td>0.996383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.012668</td>\n",
       "      <td>0.996200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.018733</td>\n",
       "      <td>0.995433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.015480</td>\n",
       "      <td>0.995900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.013633</td>\n",
       "      <td>0.996617</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       loss  accuracy\n",
       "0  0.019405  0.994150\n",
       "1  0.018580  0.994883\n",
       "2  0.017222  0.994800\n",
       "3  0.017676  0.994617\n",
       "4  0.016781  0.995117\n",
       "5  0.013922  0.996383\n",
       "6  0.012668  0.996200\n",
       "7  0.018733  0.995433\n",
       "8  0.015480  0.995900\n",
       "9  0.013633  0.996617"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(t1.history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "round-purchase",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.DataFrame(t1.history).plot(figsize = (8,5))\n",
    "plt.grid(True)\n",
    "plt.gca().set_ylim(0,1.3)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "under-crown",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "direct-wages",
   "metadata": {},
   "source": [
    "### Saving the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "attached-nirvana",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "changed-optimum",
   "metadata": {},
   "outputs": [],
   "source": [
    "os.chdir('F:/Sandeep/SANDEEP DOCS/DLCVNLP')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "painful-eagle",
   "metadata": {},
   "outputs": [],
   "source": [
    "unique_path = mistmodel.save('model.h5')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "early-garlic",
   "metadata": {},
   "source": [
    "#### Reading an jpeg image and checking prediction of our image by using pretrained model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "extra-comfort",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x18500105668>"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# importing matplotlib modules \n",
    "import matplotlib.image as mpimg \n",
    "import matplotlib.pyplot as plt \n",
    "  \n",
    "# Read Images \n",
    "img = mpimg.imread('four.png') \n",
    "  \n",
    "# Output Images \n",
    "plt.imshow(img) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "played-guard",
   "metadata": {},
   "outputs": [],
   "source": [
    "#### Converting rgb to gray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "instrumental-behavior",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "\n",
    "def rgb2gray(rgb):\n",
    "    return np.dot(rgb[...,:3], [0.2989, 0.5870, 0.1140])\n",
    "\n",
    "img = mpimg.imread('Four.png')     \n",
    "gray = rgb2gray(img)    \n",
    "plt.imshow(gray, cmap=plt.get_cmap('gray'), vmin=0, vmax=1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "alien-ontario",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(228, 228, 4)"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "img.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "boolean-night",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(228, 228)"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gray.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "contrary-toyota",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0.02352941, 0.05098039, 0.05882353, 1.        ],\n",
       "        [0.        , 0.        , 0.        , 1.        ],\n",
       "        [0.        , 0.        , 0.        , 1.        ],\n",
       "        ...,\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ],\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ],\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ]],\n",
       "\n",
       "       [[0.        , 0.        , 0.        , 1.        ],\n",
       "        [0.        , 0.        , 0.        , 1.        ],\n",
       "        [0.        , 0.        , 0.        , 1.        ],\n",
       "        ...,\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ],\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ],\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ]],\n",
       "\n",
       "       [[0.        , 0.        , 0.        , 1.        ],\n",
       "        [0.        , 0.        , 0.        , 1.        ],\n",
       "        [0.        , 0.        , 0.        , 1.        ],\n",
       "        ...,\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ],\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ],\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[0.02352941, 0.05098039, 0.05882353, 1.        ],\n",
       "        [0.        , 0.        , 0.        , 1.        ],\n",
       "        [0.        , 0.        , 0.        , 1.        ],\n",
       "        ...,\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ],\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ],\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ]],\n",
       "\n",
       "       [[0.28235295, 0.5803922 , 0.7019608 , 1.        ],\n",
       "        [0.29803923, 0.60784316, 0.73333335, 1.        ],\n",
       "        [0.29803923, 0.60784316, 0.73333335, 1.        ],\n",
       "        ...,\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ],\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ],\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ]],\n",
       "\n",
       "       [[0.00784314, 0.14117648, 0.18431373, 1.        ],\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ],\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ],\n",
       "        ...,\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ],\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ],\n",
       "        [0.00784314, 0.14117648, 0.18431373, 1.        ]]], dtype=float32)"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "broadband-frank",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Resizing the input data of gray image as it is shape(224,225) but input for our model was (28,28)\n",
    "import cv2\n",
    "gray = cv2.resize(gray,(28,28))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "insured-citation",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(28, 28)"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gray.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "british-beginning",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.2959109 ],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.39248501, 0.94723765, 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.94723765, 0.94723765,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.9470702 , 0.94723765, 0.94623294, 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.94723765, 0.94623294,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.94723765, 0.94723765, 0.94709412, 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.94723765, 0.94695059,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.85560006, 0.94723765, 0.94723765, 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.94723765, 0.94723765,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.94656785, 0.94723765, 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.94723765, 0.94723765,\n",
       "        0.24215675, 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.94723765, 0.94723765, 0.43574859,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.94723765, 0.94723765,\n",
       "        0.93784043, 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.94690275, 0.94723765, 0.94690275,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.94723765, 0.94723765,\n",
       "        0.931677  , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.94723765, 0.94723765, 0.9470702 ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.94606549, 0.94723765,\n",
       "        0.94690275, 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.94723765, 0.94723765, 0.94723765,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.94723765, 0.94723765,\n",
       "        0.94723765, 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.94723765, 0.94723765, 0.94723765,\n",
       "        0.39360363, 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.94723765, 0.94723765,\n",
       "        0.94699843, 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.94723765, 0.94723765, 0.94723765,\n",
       "        0.9464004 , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.9467353 , 0.94723765,\n",
       "        0.94709412, 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.94723765, 0.94714196, 0.94723765,\n",
       "        0.94723765, 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.94723765, 0.94723765,\n",
       "        0.94723765, 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.94723765, 0.94723765, 0.94723765,\n",
       "        0.94723765, 0.25193247, 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.94690275, 0.94695059,\n",
       "        0.94723765, 0.57883662, 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.08527317, 0.94723765, 0.94723765,\n",
       "        0.94723765, 0.94417453, 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.94723765, 0.94723765,\n",
       "        0.94723765, 0.94723765, 0.94723765, 0.94723765, 0.82895087,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.94723765, 0.94723765,\n",
       "        0.94723765, 0.94723765, 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.9284595 ,\n",
       "        0.94723765, 0.94723765, 0.94723765, 0.94723765, 0.94723765,\n",
       "        0.94723765, 0.9470702 , 0.94723765, 0.9467353 , 0.94723765,\n",
       "        0.94723765, 0.94723765, 0.94723765, 0.94623294, 0.94723765,\n",
       "        0.94723765, 0.9467353 , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.9400503 , 0.94723765,\n",
       "        0.94723765, 0.94723765, 0.94723765, 0.94723765, 0.94723765,\n",
       "        0.94723765, 0.94723765, 0.94723765, 0.94723765, 0.94723765,\n",
       "        0.94723765, 0.94723765, 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.94723765,\n",
       "        0.94723765, 0.94687883, 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.94723765,\n",
       "        0.94723765, 0.92012175, 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.94675922,\n",
       "        0.94723765, 0.94685491, 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.94723765,\n",
       "        0.94723765, 0.94687883, 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.28284513,\n",
       "        0.94723765, 0.94723765, 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.22829793,\n",
       "        0.94723765, 0.94723765, 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.94723765, 0.94723765, 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.14018732, 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.34809021],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.2959109 ]])"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "moderate-celebrity",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_new = test_x[:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "working-happening",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([1, 28, 28])"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_new.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "selective-somalia",
   "metadata": {},
   "outputs": [],
   "source": [
    "gray = gray.reshape(1,28,28)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "detailed-entertainment",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4], dtype=int64)"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = np.argmax(mistmodel.predict(gray), axis=-1)\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "military-mayor",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
